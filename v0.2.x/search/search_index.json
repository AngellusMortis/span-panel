{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#unofficial-span-panel-python-api-and-cli","title":"Unofficial SPAN Panel Python API and CLI","text":"<p><code>span-panel</code> is an unofficial API for the SPAN Smart Panel. There is no affiliation with SPAN.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Full documentation for the project.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>A SPAN Smart Panel.<ul> <li>Latest version of library is generally only tested against the latest firmware version.</li> </ul> </li> <li>Python 3.9+</li> <li>POSIX compatible system<ul> <li>Library is only test on Linux, specifically the latest Debian version available for the official Python Docker images, but there is no reason the library should not work on any Linux distro or MacOS.</li> </ul> </li> </ul> <p>Alternatively you can use the provided Docker container, in which case the only requirement is Docker or another OCI compatible orchestrator (such as Kubernetes or podman).</p> <p>Windows is not supported. If you need to use <code>span-panel</code> on Windows, use Docker Desktop and the provided docker container or WSL.</p>"},{"location":"#install","title":"Install","text":""},{"location":"#from-pypi","title":"From PyPi","text":"<p><code>span-panel</code> is available on PyPi:</p> Bash<pre><code>pip install span-panel\n</code></pre>"},{"location":"#from-github","title":"From Github","text":"Bash<pre><code>pip install git+https://github.com/AngellusMortis/span-panel.git#egg=span-panel\n</code></pre>"},{"location":"#using-docker-container","title":"Using Docker Container","text":"<p>A Docker container is also provided so you do not need to install/manage Python as well. You can add the following to your <code>.bashrc</code> or similar.</p> Bash<pre><code>function span-panel() {\n    docker run --rm -it \\\n      -e SPAN_HOST=http://your_span_ip \\\n      -e SPAN_TOKEN=your_token \\\n      ghcr.io/angellusmortis/span-panel:latest \"$@\"\n}\n</code></pre> <p>Some notes about the Docker version since it is running inside of a container:</p> <ul> <li>You can update at any time using the command <code>docker pull ghcr.io/AngellusMortis/span-panel:latest</code></li> <li>The container supports <code>linux/amd64</code> and <code>linux/arm64</code> natively. This means it will also work well on MacOS or Windows using Docker Desktop.</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#getting-an-auth-token","title":"Getting an Auth Token","text":"<p>Before being able to do anything, you need to get an auth token from your SPAN Panel. The <code>generate-token</code> subcommand will walk you through how.</p> Bash<pre><code>export SPAN_HOST=http://your_span_ip\n\nspan-panel generate-token\n</code></pre>"},{"location":"#cli","title":"CLI","text":"Bash<pre><code>export SPAN_HOST=http://your_span_ip\nexport SPAN_TOKEN=your_token\n\nspan-panel --help\nspan-panel panel meter\nspan-panel circuits list-ids\n</code></pre>"},{"location":"#python","title":"Python","text":"<p><code>span-panel</code> itself is 100% async, so as such this library is primarily designed to be used in an async context.</p> <p>The main interface for the library is the <code>span_panel.SpanClient</code>:</p> Python<pre><code>import asyncio\n\nfrom span_panel import SpanClient\n\n\nclient = SpanClient(host=host, token=token)\n\nasync def main():\n    return await client.get_circuits()\n\nfor circuit_id, circuit in asyncio.run(main()).circuits:\n    # do stuff\n</code></pre>"},{"location":"cli/","title":"Command Line","text":"<p>The <code>span-panel</code> command is provided to give a CLI interface to interact with your SPAN Panel. All commands support JSON output so it works great with <code>jq</code> for complex scripting.</p>"},{"location":"cli/#authentication","title":"Authentication","text":"<p>Following traditional twelve factor app design, the preferred way to provided authentication credentials to provided environment variables, but CLI args are also supported.</p>"},{"location":"cli/#getting-an-auth-token","title":"Getting an Auth Token","text":"<p>Before being able to do anything, you need to get an auth token from your SPAN Panel. The <code>generate-token</code> subcommand will walk you through how.</p> Bash<pre><code>export SPAN_HOST=http://your_span_ip\n\nspan-panel generate-token\n</code></pre>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"Bash<pre><code>export SPAN_HOST=http://your_span_ip\nexport SPAN_TOKEN=your_token\n\nspan-panel panel meter\n</code></pre>"},{"location":"cli/#cli-args","title":"CLI Args","text":"Bash<pre><code>span-panel -h http://your_span_ip -t your_token panel meter\n</code></pre>"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#setup","title":"Setup","text":""},{"location":"dev/#with-vs-code","title":"With VS Code","text":"<p>Development with this project is designed to be done via VS Code + Docker. It is a pretty standard Python package, so feel free to use anything else, but all documentation assumes you are using VS Code.</p> <ul> <li>VS Code + Remote Containers extension</li> <li>Docker<ul> <li>If you are using Linux, you need Docker Engine 19.0 or newer and you need to enable Docker Buildkit</li> <li>If you are using Docker Desktop on MacOS or Windows, you will need Docker Desktop 3.2.0 or newer</li> </ul> </li> </ul> <p>Once you have all three setup,</p> <ol> <li>Clone repo</li> <li>Open the main folder</li> <li>You should be prompted to \"Reopen folder to develop in a container\". If you are not, you can open the Command Palette run the \"Remote-Containers: Reopen in Container\" command.</li> </ol> <p>This should be all you need to do to get a working development environment. The docker container will automatically be build and VS Code will attach itself to it. The integrated terminal in VS Code will already be set up with the <code>span-panel</code> command.</p>"},{"location":"dev/#docker-without-vs-code","title":"Docker (without VS Code)","text":"<p>You can still setup develop without VS Code, but it is still recommended to use the development container to ensure you have all of the required dependencies. As a result, the above requirement for Docker is still needed.</p> <p>Once you have Docker setup,</p> <ol> <li>Clone repo</li> <li>Build and open dev container</li> </ol> Bash<pre><code>docker buildx build -f Dockerfile --target=dev -t span-panel-dev .\ndocker run --rm -it -v /home/cbailey/dev/span-panel:/workspaces/span-panel span-panel-dev bash\n</code></pre>"},{"location":"dev/#authenticating-with-span-panel-automatically","title":"Authenticating with SPAN Panel Automatically","text":"<p>The project allows you to create an environment file to put your local protect instance data into so you do not need to constantly enter in or accidentally commit it to the Git repo.</p> <p>Make a file in the root of the project named <code>.env</code> with the following and change accordingly:</p> Text Only<pre><code>SPAN_HOST=http://your_span_ip\nSPAN_TOKEN=your_token\n</code></pre>"},{"location":"dev/#linting-and-testing","title":"Linting and Testing","text":"<p>The following scripts exist to easily format, lint and test code in the same fashion as CI:</p> Text Only<pre><code>.bin/format-code\n.bin/lint-code\n.bin/test-code\n</code></pre> <p>These commands are also all available as VS Code tasks as well. Tests are also fully integration with the Testing panel in VS Code and can be easily debug from there.</p>"},{"location":"dev/#updating-requirements","title":"Updating Requirements","text":"<p>To generate an updated pinned requirements file to be used for testing and CI using the <code>.bin/update-requirements</code> script.</p> <p>There is also a VS Code task to run this as well.</p>"}]}